{"version":3,"sources":["components/filter.js","components/personForm.js","components/persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","onFilterChange","value","onChange","PersonForm","props","onSubmit","handleAddPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Number","person","onDelete","name","number","onClick","Persons","persons","toUpperCase","includes","map","key","baseUrl","toActualObject","request","then","response","data","axios","get","newObject","post","id","put","delete","Notification","message","style","isError","content","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","allPersons","timer","setTimeout","clearInterval","event","target","preventDefault","length","nameAlreadyExists","window","confirm","oldPerson","find","p","updatedPerson","returnedPerson","catch","_","handleUpdate","newPerson","concat","deletedPerson","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.cf1ca066.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filter, onFilterChange}) => {\r\n    return (\r\n      <p>filter shown with <input value={filter} onChange={onFilterChange}/></p>\r\n    )\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => (\r\n\r\n    <form onSubmit={props.handleAddPerson}>\r\n      <div>\r\n        name: <input value={props.newName} onChange={props.handleNameChange} />\r\n      </div>\r\n      <div>\r\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Number = ({person, onDelete}) => (\r\n    <li>{person.name} {person.number} <button onClick={() => onDelete(person)}>delete</button></li>\r\n  )\r\n\r\nconst Persons = ({persons, filter, onDelete}) => {\r\n    const caseinsensitiveFilter = (person) => (\r\n      person.name.toUpperCase().includes(\r\n        filter.toUpperCase()\r\n      )\r\n    )\r\n    return (\r\n      <ul>\r\n        {persons\r\n          .filter(caseinsensitiveFilter)\r\n          .map(person => <Number key={person.name} person={person} onDelete={onDelete}/>)}\r\n      </ul>\r\n    )\r\n  }\r\n\r\nexport default Persons\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return toActualObject(axios.get(baseUrl))\r\n}\r\n\r\nconst create = newObject => {\r\n  return toActualObject(axios.post(baseUrl, newObject))\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return toActualObject(axios.put(`${baseUrl}/${id}`, newObject))\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst toActualObject = (request) => {\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, update, remove}","import React, { useState, useEffect } from 'react'\n\nimport Filter from './components/filter'\nimport PersonForm from './components/personForm'\nimport Persons from './components/persons'\n\nimport personService from './services/persons'\n\nconst nameAlreadyExists = (persons, name) => {\n  return persons.filter(person => person.name === name).length > 0\n}\n\nconst Notification = ({ message }) => {\n\n  if (message === null) {\n    return null\n  }\n\n  const style = {\n    \"color\": message.isError ? \"red\" : \"green\",\n    \"background\": \"lightgrey\",\n    \"fontSize\": \"20px\",\n    \"borderStyle\": \"solid\",\n    \"borderRadius\": \"5px\",\n    \"padding\": \"10px\",\n    \"marginBottom\": \"10px\"\n  }\n\n  return (\n    <div style={style}>\n      {message.content}\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n\n  const [ message, setMessage ] = useState(null)\n\n  // This would be more elegant if we could use optional chaining here.\n  const content = message === null ? null : message.content\n  const isError = message === null ? null : message.isError\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(allPersons =>\n        setPersons(allPersons)\n        )\n    }, [])\n\n  // Start the timer in effect hook to avoid memory leaks.\n  useEffect(() => {\n    const clearMessage = () => setMessage(null)\n    const timer = setTimeout(clearMessage, 5000)\n\n    return () => clearInterval(timer)\n  }, [content, isError])\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const handleUpdate = (name) => {\n    const oldPerson = persons.find(p => p.name === name)\n    const updatedPerson = {...oldPerson, number: newNumber}\n\n    personService\n      .update(updatedPerson.id, updatedPerson)\n      .then(returnedPerson => {\n        setPersons(\n          persons.map(\n            person =>\n              person.id !== oldPerson.id ? person: returnedPerson\n            )\n          )\n        setMessage({content:`Updated ${updatedPerson.name}.`, isError: false})\n        })\n      .catch(_ => {\n        setMessage({content: `Information of ${name} has already been removed from server`, isError: true})\n      })\n  }\n\n  const handleCreate = () => {\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    personService\n      .create(newPerson)\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson))\n        setMessage({content: `Created ${newPerson.name}.`, isError: false})\n      })\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleDelete = deletedPerson => {\n    const accepted = window.confirm(`Delete ${deletedPerson.name}?`)\n    if (accepted) {\n      personService\n        .remove(deletedPerson.id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== deletedPerson.id))\n          setMessage({content: `Deleted ${deletedPerson.name}.`, isError:false})\n        })\n    }\n  }\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n\n    if (nameAlreadyExists(persons, newName)) {\n      const acceptModification = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n\n      if (acceptModification) {\n        handleUpdate(newName)\n      }\n    } else {\n      handleCreate()\n    }\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}/>\n      <Filter filter={filter} onFilterChange={handleFilterChange}/>\n\n      <h2>add a new</h2>\n      <PersonForm\n        handleAddPerson={handleAddPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} onDelete={handleDelete}/>\n\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}